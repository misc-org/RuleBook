---
import { DOMParser } from 'xmldom';

const response = await fetch('https://raw.githubusercontent.com/misc-org/RuleBook-Docs/main/common/router.xml');
const data = await response.text();
const parser = new DOMParser();
const xml = parser.parseFromString(data, 'application/xml');
const parseError = xml.getElementsByTagName('parsererror');
if (parseError.length > 0) throw new Error('Error parsing XML');

let contents: string[] = [];
let tree: { title: string; src: string; contents: {title: string; src: string;}[] }[] = [];

if (xml) {
    const topics = xml.getElementsByTagName('topic');
    for (let i = 0; i < topics.length; i++) {
        const topic = topics[i];
        const src = topic.getAttribute('src');
        const title = topic.getAttribute('title');
        if (!src || !title) continue;

        const elements = topic.getElementsByTagName('element');
        tree.push({ title: title, src: src, contents: [] });

        if (elements.length > 0) {
            for (let j = 0; j < elements.length; j++) {
                const elementSRC = elements[j].getAttribute('src');
                if (elementSRC) {
                    const response = await fetch(`https://raw.githubusercontent.com/misc-org/RuleBook-Docs/main/common/${src}/${elementSRC}.md`);
                    if (!response.ok) continue;
                    const md = await response.text();
                    contents.push(md);
                    const match = md.match(/^#\s+(.+)$/m);
                    if (match && match[1]) {
                        const elementTitle = match[1].trim();
                        tree[tree.length - 1].contents.push({ title: elementTitle, src: elementSRC });
                    }
                }
            }
        } else {
            const response = await fetch(`https://raw.githubusercontent.com/misc-org/RuleBook-Docs/main/common/${src}.md`);
            if (!response.ok) continue;
            const md = await response.text();
            contents.push(md);
        }
    }
}
---

<div class="w-full h-full bg-slate-200">
  {tree.map(topic => (
    <div class="p-4">
        {topic.contents.length > 0 ? (
                <h2>{topic.title}</h2>
                <ul>
                    {topic.contents.map(content => (
                            <li class="pl-2">
                                <a href={`/${topic.src}/${content.src}`}>{content.title}</a>
                            </li>
                    ))}
                </ul>
        ) : (
                <h2><a href={`/${topic.src}`}>{topic.title}</a></h2>
        )}
    </div>
  ))}
</div>